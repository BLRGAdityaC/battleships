<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Battleships</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <script type="text/javascript" src="/static/game.js"></script>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <div class="container-sm" style="width: fit-content;">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
              <li class="breadcrumb-item"><a href="/">Main</a></li>
              <li class="breadcrumb-item"><a href="/list">List</a></li>
              <li class="breadcrumb-item active" aria-current="page">Game</li>
            </ol>
        </nav>

        <p id="waiting-message">Waiting for the opponent...</p>
        <div class="row" id="game-boards" style="visibility: hidden">
            <div class="col-sm-7 order-sm-2">
                <canvas style="background-color: azure;" id="shots-board"></canvas>
            </div>
            <div class="col-sm-5 text-end order-sm-1">
                <canvas style="background-color: azure;" id="ships-board"></canvas>
                <br />
                <span style="color: #4c78d9"> Opponent's remaining ships:</span>
                <p id="remaining_ships">
                    <% for (var size in remainingShips) { %>
                        <% if (remainingShips[size] > 0) { %>
                            <span id="remaining-ships-<%= size %>">
                                <% for (var i = 0; i < remainingShips[size]; i++) {
                                     %><span style="margin-left: 5px"><%= "ðŸŸ¦".repeat(size) %></span><%
                                } %>
                            </span><br />
                        <% } %>
                    <% } %>
                </p>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <button class="btn btn-outline-info" onclick="goFullScreen()">Fullscreen</button>
            </div>
        </div>

    </div>
    <script>
        const gameId = '<%= gameId %>'
        window.gameId = gameId
        const d = new Date()
        d.setTime(d.getTime() + (1*24*60*60*1000))
        let expires = "expires="+ d.toUTCString()
        document.cookie = "gameId=" + gameId + ";" + expires + ";path=/"

        const urlParams = new URLSearchParams(window.location.search)
        window.playerId = urlParams.get('playerId')
        document.cookie = "playerId=" + window.playerId + ";" + expires + ";path=/"

        function goFullScreen() {
            const gameBoardsDiv = document.getElementById("game-boards")
            if (gameBoardsDiv.requestFullscreen) {
                gameBoardsDiv.requestFullscreen()
            } else if(gameBoardsDiv.webkitRequestFullscreen) {
                gameBoardsDiv.webkitRequestFullscreen()
            } else if(gameBoardsDiv.mozRequestFullScreen) {
                gameBoardsDiv.mozRequestFullScreen()
            }
        }

        const animateRemovedNode = (ele, previousSibling, nextSibling) => {
            if (ele.hasAttribute("dont-animate")) {
                return
            }

            // Create a clone of the removed node
            const clonedNode = ele.cloneNode(true)
            clonedNode.setAttribute("dont-animate", 'true')

            // Insert the cloned node at the appropriate position
            if (nextSibling && nextSibling.parentNode) {
                nextSibling.parentNode.insertBefore(clonedNode, nextSibling)
            } else if (previousSibling && previousSibling.parentNode) {
                previousSibling.parentNode.appendChild(clonedNode)
            }

            clonedNode.style.transformOrigin = "center"
            clonedNode.style.overflow = "hidden"
            clonedNode.animate([{ opcity: 1 }, { opacity: 0 },], {
                duration: 600,
                easing: "linear",
            }).addEventListener("finish", () => {
                clonedNode.style.overflow = ""
                clonedNode.remove()
            });
        }

        const mutationCallback = (entries, instance) => {
            entries.forEach((entry) => {
                entry.removedNodes.forEach((removedNode) => {
                    animateRemovedNode(removedNode, entry.previousSibling, entry.nextSibling)
                })
            })
        }
        const mutationObserver = new MutationObserver(mutationCallback)

        const remainingShipSpanElements = document.querySelectorAll('SPAN[id*="remaining-ships-"]')
        remainingShipSpanElements.forEach((element) => {
            mutationObserver.observe(element, {
                attributes: false,
                characterData: false,
                childList: true,
                subtree: false,
            })
        })

     </script>
</body>
</html>